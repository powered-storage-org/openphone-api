/**
 * OpenPhone API SDK Client
 *
 * ⚠️ WARNING: This code was primarily generated by AI.
 * Please review thoroughly before using in production environments.
 * Use at your own risk.
 */

import createClient from 'openapi-fetch';
import type { paths } from './types.js';

export interface OpenPhoneConfig {
  apiKey: string;
  baseUrl?: string;
  timeout?: number;
}

export class OpenPhoneClient {
  private client: ReturnType<typeof createClient<paths>>;
  private config: OpenPhoneConfig;

  constructor(config: OpenPhoneConfig) {
    this.config = {
      baseUrl: 'https://api.openphone.com',
      timeout: 30000,
      ...config,
    };

    this.client = createClient<paths>({
      baseUrl: this.config.baseUrl,
      headers: {
        Authorization: `Bearer ${this.config.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': 'openphone-api-sdk/1.0.0',
      },
    });
  }

  // Calls API
  async listCalls(params: {
    phoneNumberId: string;
    userId?: string;
    participants: string[];
    since?: string;
    createdAfter?: string;
    createdBefore?: string;
    maxResults: number;
    pageToken?: string;
  }) {
    const { data, error, response } = await this.client.GET('/v1/calls', {
      params: {
        query: params,
      },
    });
    return { data, error, response };
  }

  async getCall(callId: string) {
    const { data, error, response } = await this.client.GET(
      '/v1/calls/{callId}',
      {
        params: {
          path: { callId },
        },
      }
    );
    return { data, error, response };
  }

  // Messages API
  async listMessages(params: {
    phoneNumberId: string;
    userId?: string;
    participants: string[];
    since?: string;
    createdAfter?: string;
    createdBefore?: string;
    maxResults: number;
    pageToken?: string;
  }) {
    const { data, error, response } = await this.client.GET('/v1/messages', {
      params: {
        query: params,
      },
    });
    return { data, error, response };
  }

  async getMessage(messageId: string) {
    const { data, error, response } = await this.client.GET(
      '/v1/messages/{id}',
      {
        params: {
          path: { id: messageId },
        },
      }
    );
    return { data, error, response };
  }

  async sendMessage(params: {
    content: string;
    phoneNumberId?: string;
    from: string;
    to: string[];
    userId?: string;
    setInboxStatus?: 'done';
  }) {
    const { data, error, response } = await this.client.POST('/v1/messages', {
      body: params,
    });
    return { data, error, response };
  }

  // Phone Numbers API
  async listPhoneNumbers(params?: { userId?: string }) {
    const { data, error, response } = await this.client.GET(
      '/v1/phone-numbers',
      {
        params: {
          query: params || {},
        },
      }
    );
    return { data, error, response };
  }

  // Webhooks API
  async listWebhooks(params?: { userId?: string }) {
    const { data, error, response } = await this.client.GET('/v1/webhooks', {
      params: {
        query: params || {},
      },
    });
    return { data, error, response };
  }

  async getWebhook(webhookId: string) {
    const { data, error, response } = await this.client.GET(
      '/v1/webhooks/{id}',
      {
        params: {
          path: { id: webhookId },
        },
      }
    );
    return { data, error, response };
  }

  // Create specific webhook types
  async createMessageWebhook(params: {
    url: string;
    events: ('message.received' | 'message.delivered')[];
    label?: string;
    resourceIds?: string[] | '*';
    status?: 'enabled' | 'disabled';
    userId?: string;
  }) {
    const { data, error, response } = await this.client.POST(
      '/v1/webhooks/messages',
      {
        body: {
          ...params,
          resourceIds: params.resourceIds === '*' ? ['*'] : params.resourceIds,
        },
      }
    );
    return { data, error, response };
  }

  async createCallWebhook(params: {
    url: string;
    events: ('call.completed' | 'call.ringing' | 'call.recording.completed')[];
    label?: string;
    resourceIds?: string[] | '*';
    status?: 'enabled' | 'disabled';
    userId?: string;
  }) {
    const { data, error, response } = await this.client.POST(
      '/v1/webhooks/calls',
      {
        body: {
          ...params,
          resourceIds: params.resourceIds === '*' ? ['*'] : params.resourceIds,
        },
      }
    );
    return { data, error, response };
  }

  async createCallSummaryWebhook(params: {
    url: string;
    events: ['call.summary.completed'];
    label?: string;
    resourceIds?: string[] | '*';
    status?: 'enabled' | 'disabled';
    userId?: string;
  }) {
    const { data, error, response } = await this.client.POST(
      '/v1/webhooks/call-summaries',
      {
        body: {
          ...params,
          resourceIds: params.resourceIds === '*' ? ['*'] : params.resourceIds,
        },
      }
    );
    return { data, error, response };
  }

  async createCallTranscriptWebhook(params: {
    url: string;
    events: ['call.transcript.completed'];
    label?: string;
    resourceIds?: string[] | '*';
    status?: 'enabled' | 'disabled';
    userId?: string;
  }) {
    const { data, error, response } = await this.client.POST(
      '/v1/webhooks/call-transcripts',
      {
        body: {
          ...params,
          resourceIds: params.resourceIds === '*' ? ['*'] : params.resourceIds,
        },
      }
    );
    return { data, error, response };
  }

  // Utility methods
  getConfig(): OpenPhoneConfig {
    return { ...this.config };
  }

  updateConfig(newConfig: Partial<OpenPhoneConfig>): void {
    this.config = { ...this.config, ...newConfig };

    // Recreate client with new config
    this.client = createClient<paths>({
      baseUrl: this.config.baseUrl,
      headers: {
        Authorization: `Bearer ${this.config.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': 'openphone-api-sdk/1.0.0',
      },
    });
  }
}
