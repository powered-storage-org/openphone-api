/**
 * Webhook Setup Example for OpenPhone API SDK
 * 
 * ‚ö†Ô∏è WARNING: This is NOT an official OpenPhone SDK.
 * This is an unofficial, community-created SDK.
 * 
 * ‚ö†Ô∏è WARNING: This SDK was primarily generated by AI.
 * Please review all code thoroughly before using in production.
 * Use at your own risk.
 */

import { OpenPhoneClient } from '@openphone/api-sdk';

async function webhookSetup() {
  const client = new OpenPhoneClient({
    apiKey: process.env.OPENPHONE_API_KEY || 'your-api-key-here',
  });

  try {
    // Create a message webhook
    console.log('üîó Creating message webhook...');
    const messageWebhook = await client.createMessageWebhook({
      url: 'https://your-app.com/webhooks/messages',
      events: ['message.received', 'message.delivered'],
      label: 'My Message Webhook',
      resourceIds: '*', // Listen to all phone numbers
      status: 'enabled',
    });

    if (messageWebhook.error) {
      console.error('Error creating message webhook:', messageWebhook.error);
    } else {
      console.log('Message webhook created:', messageWebhook.data);
    }

    // Create a call webhook
    console.log('\nüîó Creating call webhook...');
    const callWebhook = await client.createCallWebhook({
      url: 'https://your-app.com/webhooks/calls',
      events: ['call.completed', 'call.ringing', 'call.recording.completed'],
      label: 'My Call Webhook',
      resourceIds: '*',
      status: 'enabled',
    });

    if (callWebhook.error) {
      console.error('Error creating call webhook:', callWebhook.error);
    } else {
      console.log('Call webhook created:', callWebhook.data);
    }

    // Create a call summary webhook
    console.log('\nüîó Creating call summary webhook...');
    const summaryWebhook = await client.createCallSummaryWebhook({
      url: 'https://your-app.com/webhooks/summaries',
      events: ['call.summary.completed'],
      label: 'My Summary Webhook',
      resourceIds: '*',
      status: 'enabled',
    });

    if (summaryWebhook.error) {
      console.error('Error creating call summary webhook:', summaryWebhook.error);
    } else {
      console.log('Call summary webhook created:', summaryWebhook.data);
    }

    // Create a call transcript webhook
    console.log('\nüîó Creating call transcript webhook...');
    const transcriptWebhook = await client.createCallTranscriptWebhook({
      url: 'https://your-app.com/webhooks/transcripts',
      events: ['call.transcript.completed'],
      label: 'My Transcript Webhook',
      resourceIds: '*',
      status: 'enabled',
    });

    if (transcriptWebhook.error) {
      console.error('Error creating call transcript webhook:', transcriptWebhook.error);
    } else {
      console.log('Call transcript webhook created:', transcriptWebhook.data);
    }

    // List all webhooks
    console.log('\nüìã Listing all webhooks...');
    const allWebhooks = await client.listWebhooks();

    if (allWebhooks.error) {
      console.error('Error listing webhooks:', allWebhooks.error);
    } else {
      console.log('All webhooks:', allWebhooks.data);
    }

  } catch (error) {
    console.error('Unexpected error:', error);
  }
}

// Run the example
if (import.meta.main) {
  webhookSetup();
}
